<div class="visualization" id="v-answer">
  <div class="tabs">
    <ul class="tab-links">
        <li class="active"><a href="#world" data-toggle="tab">Global Data</a></li>
        <li><a href="#heatmap" data-toggle="tab">World Map</a></li>
        <!-- <li><a href="#city"><%#= answer.user.location.city %></a></li> -->
        <li><a href="#country" data-toggle="tab">Country Data</a></li>
        <!--<li><a href="#pstm" data-toggle="tab">People Like Me</a></li>-->
    </ul>

    <div class="tab-content">
        <div id="world" class="tab active">
          <a class="btnPrevious"><%= image_tag("back_tab.png", :class => "visualization-tab-img")%></a>
            This tab shows what everyone has answered.
          <a class="btnNext"><%= image_tag("forward_tab_blue.png", :class => "visualization-tab-img") %></a>
          <p></p>

          <div id="answer-world" class='answer-chart'></div>
        </div>

        <div id="country" class="tab">
          <%= select_tag(@countries_answered, options_for_select(@countries_answered, answer.user_country),class: "country_dropdown", id:"country_position", prompt: "Select a Country") %>

          <a class="btnPrevious"><%= image_tag("back_tab_blue.png", :style => "margin-left: 10em;")%></a>
            <i class="country_text">This tab shows what everyone from "<%= answer.user_country%>" has answered.</i>
          <a class="btnNext"><%= image_tag("forward_tab_blue.png", :class => "visualization-tab-img") %></a>

          <div id="answer-country" class='answer-chart'></div>
        </div>

        <% has_city = user_signed_in? ? answer.user.location.city.present? : false %>
        <% if has_city %>
          <div id="city" class="tab">
            <div id="answer-city" class='answer-chart'></div>
          </div>
        <% end %>

        <div id="heatmap" class="tab">
          <div class="heat_position">
            <% temp = answer.user_lat_long %>
              <% @answer_selection = Array.new %>
              <% temp.each do |ans, arr| %>
              <% @answer_selection.push(ans); %>
            <% end %>
          </div>
          <%= select_tag(@answer_selection, options_for_select(@answer_selection, answer.user_answer), id:"heat_position", prompt: "Select an Answer") %>
          <a class="btnPrevious"><%= image_tag("back_tab_blue.png", :style => "margin-left: 10em;")%></a>
            <i class="heat_text">This map shows where people who answered "<%= answer.user_answer%>" are from.</i>
          <a class="btnNext"><%= image_tag("forward_tab_blue.png", :class => "visualization-tab-img")%></a>

          <div id="map-canvas"></div>
        </div>

        <div id="pstm" class="tab">
          <a class="btnPrevious"><%= image_tag("back_tab_blue.png", :class => "visualization-tab-img")%></a>
            This tab shows what people who are "<%= (answer.user_age - 3).to_s + "-" + (answer.user_age + 3).to_s + " & " + answer.user_gender + "(Gender)"%>" have answered.
          <a class="btnNext"><%= image_tag("forward_tab.png", :class => "visualization-tab-img")%></a>
          <p></p>
          <% @guest = User.where(id: cookies[:guest]).first %>
          <% unless (@guest.gender != nil && @guest.age != nil) || (user_signed_in? ? (current_user.gender != nil && current_user.age != nil) : false) %>
            <p id="pstm_description">This tab shows you what people similiar to your age and gender have answered.</p>
            <p id="gender_age_label">Fill in the form below to see a report tailored for you!</p>
            <%= form_tag({controller: "answers", action: "gender"}, method: "get" ) do |f| %>
              <%= text_field_tag(:age_text, nil, :placeholder => "Birthyear (YYYY)", class: "form-control", id: "age_form") %>
              <%= select_tag(:gender_id, options_for_select([['Male', 1], ['Female', 2]], 2), class: "form-control", id: "gender_form") %>
              <%= submit_tag("Show Me", data: { disable_with: "Please wait..." }, class: "modal-button", :id =>
                "gender_age_submit")  %>
            <% end %>
          <% else %>
            <div id="answer-pstm" class='answer-chart'></div>
          <% end %>
        </div>
    </div>
  </div>

  <%= link_to 'This link shows the individual report, share it with your friends!', report_question_path, :target => "_blank" %>

</div>

<!-- key=AIzaSyDELDDeZFCjRjY4yvz3o0ium-jSwRvnwFY -->
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDELDDeZFCjRjY4yvz3o0ium-jSwRvnwFY">
</script>

<script>
  // Heatmap Begin
  var map, pointarray, heatmap, indexComma, latitude, longitude;
  var heatData = [];

  var userLocation = {};

  //array of answers and their respective coordinates per answer
  <% temp = answer.user_lat_long %>
  <% temp.each do |ans, arr| %>
    userLocation[<%= ans.to_json.html_safe %>] = <%= temp[ans].to_json.html_safe %>
  <% end %>

  function createHeat(select){
    heatData = [];
    console.log(select);
    for(i=0; i<userLocation[select].length; i++){
      indexComma = userLocation[select][i].indexOf(",");
      latitude = Number(userLocation[select][i].substring(0, indexComma-1));
      longitude = Number(userLocation[select][i].substring(indexComma+1, userLocation[select][i].length -1));

      heatData[i] = new google.maps.LatLng(latitude, longitude);
    }
  }

  function changeRadius() {
    heatmap.set('radius', heatmap.get('radius') ? null : 20);
  }

  function changeGradient() {
    var gradient = [
      'rgba(0, 255, 255, 0)',
      'rgba(0, 255, 255, 1)',
      'rgba(0, 191, 255, 1)',
      'rgba(0, 127, 255, 1)',
      'rgba(0, 63, 255, 1)',
      'rgba(0, 0, 255, 1)',
      'rgba(0, 0, 223, 1)',
      'rgba(0, 0, 191, 1)',
      'rgba(0, 0, 159, 1)',
      'rgba(0, 0, 127, 1)',
      'rgba(63, 0, 91, 1)',
      'rgba(127, 0, 63, 1)',
      'rgba(191, 0, 31, 1)',
      'rgba(255, 0, 0, 1)'
    ]
    heatmap.set('gradient', heatmap.get('gradient') ? null : gradient);
  }

  function initialize() {
    var mapOptions = {
      zoom: 3,
      center: new google.maps.LatLng(Number(<%= answer.center_lat_long()[0].to_json.html_safe %>),  Number(<%= answer.center_lat_long()[1].to_json.html_safe %>)),
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };

    map = new google.maps.Map(document.getElementById('map-canvas'),
        mapOptions);

    pointarray = new google.maps.MVCArray(heatData);

    heatmap = new google.maps.visualization.HeatmapLayer({
      data: pointarray
    });

    changeRadius();
    changeGradient();

    heatmap.setMap(map);
  }

  google.maps.event.addDomListener(window, 'load', initialize);
  // Heatmap End

  $('.btnNext').click(function(){
    $('.tab-links > .active').next('li').find('a').trigger('click');
  });

  $('.btnPrevious').click(function(){
    $('.tab-links > .active').prev('li').find('a').trigger('click');
  });

<% if !question.option_count %>
  
  jQuery(document).ready(function() {
    jQuery('.tabs .tab-links a').on('click', function(e)  {
        var currentAttrValue = jQuery(this).attr('href');

        // Show/Hide Tabs
        jQuery('.tabs ' + currentAttrValue).show().siblings().hide();

        // Change/remove current tab to active
        jQuery(this).parent('li').addClass('active').siblings().removeClass('active');

        e.preventDefault();
        if(currentAttrValue != "#heatmap"){
          show_location_answer(currentAttrValue.substring(1, currentAttrValue.length));
        }
        else{

          google.maps.event.trigger(map, 'resize');
          createHeat(<%= answer.user_answer.to_json.html_safe %>);
          initialize();

          heatmap.setMap(heatmap.getMap() ? null : map);
          heatmap.setMap(heatmap.getMap() ? null : map);
        }
    });
  });

  $('#country_position').change(function (e) {
    var country = $(e.target).find(":selected").val();
    var text = "This tab shows what everyone from '" + country + "' has answered.";
    $(".country_text").html(text);
    data_answer.country_stats = data_answer.country[country]
    show_location_answer('country');
  });

  //heatmap drop down
  $('#heat_position').change(function (e) {
    var user_selection = $(e.target).find(":selected").val();
    var text = "This map shows where people who answered '" + user_selection + "' are from.";
    $(".heat_text").html(text);
    createHeat(user_selection);

    //google.maps.event.addDomListener(window, 'load', initialize);
    initialize();

    //Manually toggle the map twice to refresh the map
    heatmap.setMap(heatmap.getMap() ? null : map);
    heatmap.setMap(heatmap.getMap() ? null : map);
  });  

  var data_answer = {};
  <% if answer.question.value_type == "collection" %>
    data_answer.collection = true;
  <% else %>
    data_answer.collection = false;
  <% end %>
  <% if has_city %>
    data_answer.city = <%= answer.data_array('city').html_safe %>;
  <% end %>
  <% if answer.question.value_type == "collection" %>
    data_answer.country = <%= answer.percent_country.to_json.html_safe %>;
  <% else %>
   data_answer.country = <%= answer.numeric_country.to_json.html_safe %>;
  <% end %>
  data_answer.world = <%= answer.data_array('world').html_safe %>;
  //data_answer.pstm = <%#= answer.data_array('pstm').html_safe %>;
  data_answer.selected = 'world';

  var chart_answer = c3.generate({
    size: { width: document.getElementsByClassName('tab-content').clientWidth,
            height: 450 },
    data: {
      x: data_answer.collection ? null : 'x',
      columns: transform_data_answer(data_answer.selected),
      type: data_answer.collection ? 'donut' : 'bar'
    },
    axis: {
      x: {
        label: {
          text: 'Answer Distribution',
          position: 'outer-center'
        }
      },
      y: {
        label: {
          text: 'Number of Votes',
          position: 'outer-middle'
        }
      }
    },
    tooltip: {
      format: {
        title: function (d) { return null; },
        value: function (value, ratio, id) {
          var sum = data_answer[data_answer.selected].reduce(function(p, c) {
            return p + c[1];
          }, 0);
          return (value / sum * 100).toFixed(1) + '%';
        }
      },
      contents: function (d, defaultTitleFormat, defaultValueFormat, color) {
        d.forEach(function(el){ el.name = el.value })
        return this.getTooltipContent ?
          this.getTooltipContent(d, defaultTitleFormat, defaultValueFormat, color) : '';
      }
    }
  });

  $("#answer-" + data_answer.selected).append(chart_answer.element);

  window.addEventListener("resize", myFunction);

  function myFunction() {
    chart_answer.resize({width: document.getElementsByClassName('tab-content').clientWidth});
  }

  function transform_data_answer(loc) {
    var data = data_answer[loc];

    if (loc == 'country'){
      data = data_answer.country_stats;
      if(data != null){
        return data;
      }
      else {
        var country = "<%= answer.user_country %>";
        data_answer.country_stats = data_answer.country[country];
        data = data_answer.country_stats;
        return data;
      }
    }
    else if (loc == 'pstm'){
      if(data_answer.collection){return data;}
    }
    else{
      if (data_answer.collection) {return data;}
      else {
      data = [['x'], [loc]];
      data_answer[loc].forEach(function(el, i, arr) {
        data[0].push(el[0]);
        data[1].push(el[1]);
      });
      return data;
      }
    }
  }

  function show_location_answer(loc) {
    previous_selected = data_answer.selected;
    data_answer.selected = loc;
    console.log(data_answer.selected);
    var loc_arr = [];

    if(data_answer.collection){
      for (i = 0; i < transform_data_answer('world').length; i++){
        loc_arr.push(transform_data_answer('world')[i][0])
      }
    } else {
      loc_arr = [previous_selected];
    }

    $("#answer-" + data_answer.selected).append(chart_answer.element);

    chart_answer.load({
      columns: transform_data_answer(loc),
      unload: loc_arr
    });
  }
<% else %>
  jQuery(document).ready(function() {
    jQuery('.tabs .tab-links a').on('click', function(e)  {
        var currentAttrValue = jQuery(this).attr('href');

        // Show/Hide Tabs
        jQuery('.tabs ' + currentAttrValue).show().siblings().hide();

        // Change/remove current tab to active
        jQuery(this).parent('li').addClass('active').siblings().removeClass('active');

        d3.select("svg").remove();
        d3.select("g").remove();
        e.preventDefault();
        if(currentAttrValue != "#heatmap"){
          data_answer.selected = currentAttrValue.substring(1, currentAttrValue.length);
          createChart(currentAttrValue.substring(1, currentAttrValue.length), <%= answer.user_country.to_json.html_safe%>);
          //show_location_answer(currentAttrValue.substring(1, currentAttrValue.length));
        }
        else{

          google.maps.event.trigger(map, 'resize');
          createHeat(<%= answer.user_answer.to_json.html_safe %>);
          initialize();

          heatmap.setMap(heatmap.getMap() ? null : map);
          heatmap.setMap(heatmap.getMap() ? null : map);
        }
    });
  });

  $('.country_dropdown').change(function (e) {
    var country = $(e.target).find(":selected").val();
    data_answer.country_stats = data_answer.country[country];
    console.log(country);
    d3.select("svg").remove();
    d3.select("g").remove();
    createChart("country", country);
  });

  //heatmap drop down
  $('#heat_position').change(function (e) {
    var country = $(e.target).find(":selected").val();
    createHeat(country);

    //google.maps.event.addDomListener(window, 'load', initialize);
    initialize();

    //Manually toggle the map twice to refresh the map
    heatmap.setMap(heatmap.getMap() ? null : map);
    heatmap.setMap(heatmap.getMap() ? null : map);
  });

  var data_answer = {};
  
  data_answer.country = <%= answer.percent_country.to_json.html_safe %>;
  data_answer.world = <%= answer.data_array('world').html_safe %>;
  // data_answer.pstm = <%#= answer.data_array('pstm').html_safe %>;
  data_answer.selected = 'world';

  function createChart(tab_selection, country_name) {
    console.log(tab_selection);
    (function(d3) {
      'use strict';
      if (tab_selection == 'world'){
        var dataset = data_answer[tab_selection];
      }

      if (tab_selection == 'country'){
         var dataset = data_answer[tab_selection][country_name];
      }

      if (tab_selection == 'pstm'){
        var dataset = data_answer[tab_selection];
      }
      var axisMargin = 20;
      var margin = 20;
      var valueMargin = 4;
      var width = 500;
      var height = 400;
      var barHeight = (height - axisMargin - margin * 6) * 0.6 / dataset.length;
      var barPadding = (height - axisMargin - margin * 3) * 0.6 / dataset.length,
    dataset, bar, svg, scale, xAxis, labelWidth = 85;

  var max = d3.max(dataset.map(function(i) {
    return i[1];
  }));

  var svg = d3.select('#answer-' + tab_selection)
    .append("svg")
    .attr("width", width)
    .attr("height", 400);

  var colors = [ '#ff355e', '#18BDD0', '#b5e900', '#f9429e', '#ffd500', '#1E90FF', '#ff748c', '#7cfc00', '#ffef00', '#00bfff', '#18d087', '#ad8acc', '#ed872d'];

  var colorScale = d3.scale.quantize()
    .domain([0, dataset.length])
    .range(colors);

  var bar = svg.selectAll("g")
    .data(dataset)
    .enter()
    .append("g");

  bar.attr("class", "bar")
    .attr("cx", 0)
    .style('fill', function(d, i) {
      return colorScale(i);
    })
    .attr("transform", function(d, i) {
      return "translate(" + margin + "," + (i * (barHeight + barPadding) + barPadding) + ")";
    });

  bar.append("text")
    .attr("class", "label")
    .attr("y", barHeight / 2)
    .attr("dy", ".35em")
    .attr("dx", "-1em")
    .style({
      'fill': '#333',
      'font-size': '18px'
    })
    //vertical align middle
    .text(function(d) {
      return d[0];
    }).each(function() {
      labelWidth = Math.ceil(Math.max(labelWidth, this.getBBox().width));
    });

  var scale = d3.scale.linear()
    .domain([0, max])
    .range([0, width - margin * 2 - labelWidth]);

  var xAxis = d3.svg.axis()
    .scale(scale)
    .tickSize(-height + 2 * margin + axisMargin)
    .orient("bottom");

  bar.append("rect")
    .attr("transform", "translate(" + labelWidth + ", 0)")
    .attr("height", barHeight)
    .attr("width", function(d) {
      return scale(d[1]);
    });

  bar.append("text")
    .attr("class", "value").style({
      'fill': '#333',
      'font-size': '14px'
    })
    .attr("y", barHeight / 2)
    .attr("dx", -valueMargin + labelWidth) //margin right
    .attr("dy", ".35em") //vertical align middle
    .attr("text-anchor", "end")
    .text(function(d) {
      return d[1] + "%";
    })
    .attr("x", function(d) {
      var width = this.getBBox().width;
      return Math.max(width + valueMargin, scale(d[1]));
    });

  svg.insert("g", ":first-child")
    .attr("class", "axis")
    .attr("transform", "translate(" + (margin + labelWidth) + "," + (height - axisMargin - margin) + ")")
    .call(xAxis)
    .style({
      'stroke': '#adadad',
      'stroke-width': '1px',
      'fill': 'none'
    });

    })(window.d3);
  }

  createChart(data_answer.selected, "world");

  d3.select(window).on('resize', resize);

  function resize() {
      // update width
      d3.select("svg").remove();
      d3.select("g").remove();
      createChart(data_answer.selected, <%= answer.user_country.to_json.html_safe%>);
  }

<% end %>
</script>

<!-- Google Analytics -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-50543337-4', 'auto');
  ga('require', 'linkid', 'linkid.js');
  ga('send', 'pageview');

</script>
