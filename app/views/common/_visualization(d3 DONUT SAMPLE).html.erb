<div class="visualization" id="v-answer">
  <div class="tabs">
    <ul class="tab-links">
        <li class="active"><a href="#world" data-toggle="tab">Global Data</a></li>
        <li><a href="#heatmap" data-toggle="tab">World Map</a></li>
        <!-- <li><a href="#city"><%#= answer.user.location.city %></a></li> -->
        <li><a href="#country" data-toggle="tab">Country Data</a></li>
        <li><a href="#pstm" data-toggle="tab">People Like Me</a></li>
    </ul>

    <div class="tab-content">
        <div id="world" class="tab active">
          <a><%= image_tag("back_tab.png", :class => "visualization-tab-img")%></a>
            This tab shows what everyone has answered.
          <a class="btnNext"><%= image_tag("forward_tab_blue.png", :class => "visualization-tab-img") %></a>

          <div id="answer-world" class='answer-chart'></div>
        </div>

        <div id="country" class="tab">
          <a class="btnPrevious"><%= image_tag("back_tab_blue.png", :class => "visualization-tab-img")%></a>
            This tab shows what everyone from "" has answered.
          <a class="btnNext"><%= image_tag("forward_tab_blue.png", :class => "visualization-tab-img") %></a>

          <div id="country_position" class="country_dropdown">
            <%= select_tag(@countries_answered, options_for_select(@countries_answered, answer.user_country), prompt: "Select a Country") %>
          </div>
          <div id="answer-country" class='answer-chart'></div>
        </div>

        <% has_city = user_signed_in? ? answer.user.location.city.present? : false %>
        <% if has_city %>
          <div id="city" class="tab">
            <div id="answer-city" class='answer-chart'></div>
          </div>
        <% end %>

        <div id="heatmap" class="tab">
          <a class="btnPrevious"><%= image_tag("back_tab_blue.png", :class => "visualization-tab-img")%></a>
            This map shows where people who answered "" are from.
          <a class="btnNext"><%= image_tag("forward_tab_blue.png", :class => "visualization-tab-img")%></a>

          <div id="heat_position" class="country_dropdown">
            <% temp = answer.user_lat_long %>
              <% @answer_selection = Array.new %>
              <% temp.each do |ans, arr| %>
              <% @answer_selection.push(ans); %>
            <% end %>
            <%= select_tag(@answer_selection, options_for_select(@answer_selection, answer.user_answer), prompt: "Select an Answer") %>
          </div>
          <div id="map-canvas"></div>
        </div>

        <div id="pstm" class="tab">
          <a class="btnPrevious"><%= image_tag("back_tab_blue.png", :class => "visualization-tab-img")%></a>
            This tab shows what people who are "" have answered.
          <a><%= image_tag("forward_tab.png", :class => "visualization-tab-img")%></a>

          <% @guest = User.where(id: cookies[:guest]).first %>
          <% unless (@guest.gender != nil && @guest.age != nil) || (user_signed_in? ? (current_user.gender != nil && current_user.age != nil) : false) %>
            <p id="pstm_description">This tab shows you what people similiar to your age and gender have answered.</p>
            <p id="gender_age_label">Fill in the form below to see a report tailored for you!</p>
            <%= form_tag({controller: "answers", action: "gender"}, method: "get" ) do |f| %>
              <%= text_field_tag(:age_text, nil, :placeholder => "Birthyear (YYYY)", class: "form-control", id: "age_form") %>
              <%= select_tag(:gender_id, options_for_select([['Male', 1], ['Female', 2]], 2), class: "form-control", id: "gender_form") %>
              <%= submit_tag("Show Me", data: { disable_with: "Please wait..." }, class: "modal-button", :id =>
                "gender_age_submit")  %>
            <% end %>
          <% else %>
            <div id="answer-pstm" class='answer-chart'></div>
          <% end %>
        </div>
    </div>
  </div>

  <%= link_to 'This link shows the individual report, share it with your friends!', report_question_path, :target => "_blank" %>

</div>

<!-- key=AIzaSyDELDDeZFCjRjY4yvz3o0ium-jSwRvnwFY -->
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDELDDeZFCjRjY4yvz3o0ium-jSwRvnwFY">
</script>
<script src="http://d3js.org/d3.v3.min.js"></script>

<script>
  // Heatmap Begin
  var map, pointarray, heatmap, indexComma, latitude, longitude;
  var heatData = [];

  var userLocation = {};

  //array of answers and their respective coordinates per answer
  <% temp = answer.user_lat_long %>
  <% temp.each do |ans, arr| %>
    userLocation[<%= ans.to_json.html_safe %>] = <%= temp[ans].to_json.html_safe %>
  <% end %>

  function createHeat(select){
    heatData = [];
    //console.log(select);
    for(i=0; i<userLocation[select].length; i++){
      indexComma = userLocation[select][i].indexOf(",");
      latitude = Number(userLocation[select][i].substring(0, indexComma-1));
      longitude = Number(userLocation[select][i].substring(indexComma+1, userLocation[select][i].length -1));

      heatData[i] = new google.maps.LatLng(latitude, longitude);
    }
  }

  function changeRadius() {
    heatmap.set('radius', heatmap.get('radius') ? null : 20);
  }

  function changeGradient() {
    var gradient = [
      'rgba(0, 255, 255, 0)',
      'rgba(0, 255, 255, 1)',
      'rgba(0, 191, 255, 1)',
      'rgba(0, 127, 255, 1)',
      'rgba(0, 63, 255, 1)',
      'rgba(0, 0, 255, 1)',
      'rgba(0, 0, 223, 1)',
      'rgba(0, 0, 191, 1)',
      'rgba(0, 0, 159, 1)',
      'rgba(0, 0, 127, 1)',
      'rgba(63, 0, 91, 1)',
      'rgba(127, 0, 63, 1)',
      'rgba(191, 0, 31, 1)',
      'rgba(255, 0, 0, 1)'
    ]
    heatmap.set('gradient', heatmap.get('gradient') ? null : gradient);
  }

  function initialize() {
    var mapOptions = {
      zoom: 3,
      center: new google.maps.LatLng(Number(<%= answer.center_lat_long()[0].to_json.html_safe %>),  Number(<%= answer.center_lat_long()[1].to_json.html_safe %>)),
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };

    map = new google.maps.Map(document.getElementById('map-canvas'),
        mapOptions);

    pointarray = new google.maps.MVCArray(heatData);

    heatmap = new google.maps.visualization.HeatmapLayer({
      data: pointarray
    });

    changeRadius();
    changeGradient();

    heatmap.setMap(map);
  }

  google.maps.event.addDomListener(window, 'load', initialize);
  // Heatmap End

  $('.btnNext').click(function(){
    $('.tab-links > .active').next('li').find('a').trigger('click');
  });

  $('.btnPrevious').click(function(){
    $('.tab-links > .active').prev('li').find('a').trigger('click');
  });

  jQuery(document).ready(function() {
    jQuery('.tabs .tab-links a').on('click', function(e)  {
        var currentAttrValue = jQuery(this).attr('href');

        // Show/Hide Tabs
        jQuery('.tabs ' + currentAttrValue).show().siblings().hide();

        // Change/remove current tab to active
        jQuery(this).parent('li').addClass('active').siblings().removeClass('active');

        d3.select("svg").remove();
        d3.select("g").remove();
        e.preventDefault();
        if(currentAttrValue != "#heatmap"){
          data_answer.selected = currentAttrValue.substring(1, currentAttrValue.length);
          createChart(currentAttrValue.substring(1, currentAttrValue.length), <%= answer.user_country.to_json.html_safe%>);
          //show_location_answer(currentAttrValue.substring(1, currentAttrValue.length));
        }
        else{

          google.maps.event.trigger(map, 'resize');
          createHeat(<%= answer.user_answer.to_json.html_safe %>);
          initialize();

          heatmap.setMap(heatmap.getMap() ? null : map);
          heatmap.setMap(heatmap.getMap() ? null : map);
        }
    });
  });

  $('.country_dropdown').change(function (e) {
    var country = $(e.target).find(":selected").val();
    data_answer.country_stats = data_answer.country[country];
    console.log(country);
    d3.select("svg").remove();
    d3.select("g").remove();
    createChart("country", country);
  });

  //heatmap drop down
  $('#heat_position').change(function (e) {
    var country = $(e.target).find(":selected").val();
    createHeat(country);

    //google.maps.event.addDomListener(window, 'load', initialize);
    initialize();

    //Manually toggle the map twice to refresh the map
    heatmap.setMap(heatmap.getMap() ? null : map);
    heatmap.setMap(heatmap.getMap() ? null : map);
  });

  var data_answer = {};
  <% if answer.question.value_type == "collection" %>
    data_answer.collection = true;
  <% else %>
    data_answer.collection = false;
  <% end %>
  <% if has_city %>
    data_answer.city = <%= answer.data_array('city').html_safe %>;
  <% end %>
  <% if answer.question.value_type == "collection" %>
    data_answer.country = <%= answer.percent_country.to_json.html_safe %>;
  <% else %>
   data_answer.country = <%= answer.numeric_country.to_json.html_safe %>;
  <% end %>
  data_answer.world = <%= answer.data_array('world').html_safe %>;
  data_answer.pstm = <%= answer.data_array('pstm').html_safe %>;
  data_answer.selected = 'world';

  var chart_answer;

  function createChart(tab_selection, country_name) {
    console.log(tab_selection);
    (function(d3) {
      'use strict';
      if (tab_selection == 'world'){
        var dataset = data_answer[tab_selection].map(function(d) {
            return {
              label: d[0],
              count: d[1]
            };
        });
      }

      if (tab_selection == 'country'){
         var dataset = data_answer[tab_selection][country_name].map(function(d) {
            return {
              label: d[0],
              count: d[1]
            };
        });
      }

      if (tab_selection == 'pstm'){
        var dataset = data_answer[tab_selection].map(function(d) {
            return {
              label: d[0],
              count: d[1]
            };
        });
      }

      var width = $(".tab-content").width();
      var height = 450;
      var donutWidth = 75;
      var radius = Math.min(width, height) / 2;

      var legendRectSize = 18;
      var legendSpacing = 4;
      var color = d3.scale.category20();
      var svg = d3.select('#answer-' + tab_selection)
        .append('svg')
        .attr('width', width)
        .attr('height', height)
        .append('g')
        .attr('transform', 'translate(' + (width / 2) +
          ',' + (height / 2) + ')');

      var arc = d3.svg.arc()
        .innerRadius(radius - donutWidth)
        .outerRadius(radius);

      var pie = d3.layout.pie()
        .value(function(d) { return d.count; })
        .sort(null);

      var path = svg.selectAll('path')
        .data(pie(dataset))
        .enter()
        .append('path')
        .attr('d', arc)
        .attr('fill', function(d, i) {
          return color(d.data.label);
        });

      path.on('mouseover', function(d) {
        d3.selectAll('.label1').html(d.data.label);
        d3.selectAll('.count1').html(d.data.count);
        d3.selectAll('.tooltip1').style('display', 'block');
      });

      path.on('mouseout', function() {
        d3.selectAll('.tooltip1').style('display', 'none');
      });

      var legend = svg.selectAll('.legend')
        .data(color.domain())
        .enter()
        .append('g')
        .attr('class', 'legend').attr('transform', function(d, i) {
          console.log(d);
          console.log(i);
          var height = legendRectSize + legendSpacing;
          var offset =  height * color.domain().length / 2;
          var horz = 10 * legendRectSize;
          var vert = i * height - offset;
          return 'translate(' + horz + ',' + vert + ')';
        });


      legend.append('rect')
        .attr('width', legendRectSize)
        .attr('height', legendRectSize)
        .style('fill', color)
        .style('stroke', color);

      legend.append('text')
        .attr('x', legendRectSize + legendSpacing)
        .attr('y', legendRectSize - legendSpacing)
        .text(function(d) { return d; });
    })(window.d3);
  }

  var tooltip = d3.select('#answer-world').append('div').attr('class', 'tooltip1');

      tooltip.append('div').attr('class', 'label1');

      tooltip.append('div').attr('class', 'count1');

  var tooltip1 = d3.select('#answer-country').append('div').attr('class', 'tooltip1');

      tooltip1.append('div').attr('class', 'label1');

      tooltip1.append('div').attr('class', 'count1');

  var tooltip2 = d3.select('#answer-pstm').append('div').attr('class', 'tooltip1');

      tooltip2.append('div').attr('class', 'label1');

      tooltip2.append('div').attr('class', 'count1');


  createChart(data_answer.selected, "world");

  d3.select(window).on('resize', resize);

  function resize() {
      // update width
      d3.select("svg").remove();
      d3.select("g").remove();
      createChart(data_answer.selected, <%= answer.user_country.to_json.html_safe%>);
  }
</script>

<!-- Google Analytics -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-50543337-4', 'auto');
  ga('require', 'linkid', 'linkid.js');
  ga('send', 'pageview');

</script>
